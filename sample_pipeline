pipeline {
environment {
registry = "aksharabits/sample"
dockerImage = ''
DOCKERHUB_CREDENTIALS = credentials('dockerhub_cred')
scannerHome = tool 'sonarqube_scanner'
workspace = "${env.WORKSPACE}"
}
agent any
stages {
stage('Cloning our Git') {
steps {
git 'https://github.com/AksharaBits/DevSecOps_Project.git'
}
}
stage('SonarQube Analysis') {
    steps{
    withSonarQubeEnv('SonarQube_GCP') {
      sh "${scannerHome}/bin/sonar-scanner"
    }
   } 
  }

 /*stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
*/
stage('Build') {
agent {label 'docker-agent'}
steps{
dir('Blog app'){
script {
// sh "chown root:jenkins /run/docker.sock"
sh 'docker stop $(docker ps -aq)'
sh 'docker rm $(docker ps -aq)'
sh 'docker build -t "$registry:$BUILD_NUMBER" -f docker/Dockerfile .'
//dockerImage = docker.build("$registry:$BUILD_NUMBER", "docker/")
}
}
}
}

stage('Test')
{
agent {label 'docker-agent'}
steps{

script {
sh 'docker run --name blog_app_$BUILD_NUMBER -d $registry:$BUILD_NUMBER'
sh 'docker exec -t blog_app_$BUILD_NUMBER python manage.py test blog -v 2 --testrunner blog.tests.views.html_test_reporter.HtmlTestReporter'
//sh 'lsof'
sh 'sudo su'
sh 'sudo docker cp "blog_app_$BUILD_NUMBER:/app/reports/all_tests.html" ${workspace}'

//sh 'docker logs'
//sh 'docker run --tty --name $registry:$BUILD_NUMBER : py manage.py test blog --verbosity=2'

}
}
}
/*
stage('Login') {
agent {label 'docker-agent'}
steps {
	sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
}
}
*/
stage('Upload Docker Image') {
agent {label 'docker-agent'}
steps{
script {
sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
//docker.withRegistry( '', registryCredential ) {
 sh 'docker push "$registry:$BUILD_NUMBER"'
//dockerImage.push("$registry:$BUILD_NUMBER")
//}
}
}
}

stage ('Deployment of Web App')
{
agent {label 'docker-agent'}
steps{
script {
sh 'docker run -d --name Blog_app_$BUILD_NUMBER -p 8000:8000 $registry:$BUILD_NUMBER'
}
}
}

/*stage('Test image') {
      

agent {label 'docker-agent'}
steps
{
script
         {
	 sh 'docker pull $registry:$BUILD_NUMBER'
	 docker.image('($registry:$BUILD_NUMBER').inside{
	  
        
               sh 'cd "Blog app"'
			sh 'python3 manage.py migrate'
			sh 'python3 manage.py loaddata users posts comments'
			sh 'python3 manage.py test blog'
            }
	
        }
        }
    }*/
    /*
    stage('Test')
    {
    agent {label 'docker-agent'}
    steps{
    script{
    try{
     docker.image($registry:$BUILD_NUMBER).withRun('-d=true -p 8888:8080') {c ->
            docker.image($registry:$BUILD_NUMBER).inside{
	    
	    sh 'cd "Blog app"'
			sh 'python3 manage.py migrate'
			sh 'python3 manage.py loaddata users posts comments'
			sh 'python3 manage.py test blog'
			
	    }
	    }
	    }
	    catch(exc){
	    sh "docker logs ${h.id}"
            throw exc
	    }
	    }
	    }
	    }
	    */
/*stage('Cleaning up') {
agent {label 'docker-agent'}
steps{
sh "docker rmi $registry:$BUILD_NUMBER"
}
}*/
}
post {
        always {
	agent {label 'docker-agent'}
	dir(workspace){
            archiveArtifacts 'all_tests.html'
	    }
        }
    }
}
